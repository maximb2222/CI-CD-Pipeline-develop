name: CI/CD for C# Script

on: [push, pull_request]

jobs:

# ======================================
# 1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ======================================
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run tests
        run: |
          if [ -d tests ]; then
            cd tests
            dotnet test --logger "trx;LogFileName=test-results.trx"
          else
            echo "No tests directory found, skipping tests"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/*.trx
        continue-on-error: true

# ======================================
# 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (VirusTotal)
# ======================================
  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Debug project structure
        run: |
          echo "Current directory: $(pwd)"
          find . -name "*.csproj" -o -name "*.sln" || true

      - name: Build project
        run: dotnet build src --configuration Release || echo "::warning::dotnet build failed"

      - name: Check vulnerable packages
        run: |
          PROJECT_FILE=$(find src -name "*.csproj" | head -1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "::warning::No .csproj file found, skipping vulnerability check"
          else
            dotnet list "$PROJECT_FILE" package --vulnerable || echo "::warning::vulnerability check failed"
          fi

      - name: VirusTotal scan
        run: |
          DLL_FILE=$(find src/bin/Release/net8.0 -name "*.dll" | head -1)
          if [ -z "$DLL_FILE" ]; then
            echo "::warning::No .dll found to scan"
          elif [ -z "${{ secrets.VIRUSTOTAL_API_KEY }}" ]; then
            echo "::warning::VIRUSTOTAL_API_KEY not set, skipping VirusTotal"
          else
            curl -s -X POST \
              -H "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
              -F "file=@$DLL_FILE" \
              https://www.virustotal.com/api/v3/files | jq . || echo "::warning::VirusTotal request failed"
          fi

# ======================================
# 3Ô∏è‚É£ –°–±–æ—Ä–∫–∞ + –≤–µ—Ä—Å–∏—è + changelog (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤–µ—Ä—Å–∏–π)
# ======================================
  build:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build project
        run: dotnet build src --configuration Release || echo "::warning::dotnet build failed"

      - name: Detect and bump version
        id: version
        run: |
          # Ensure version file exists
          if [ ! -f version ]; then
            echo "1.0.0" > version
          fi

          CURRENT_VERSION=$(cat version)
          IFS='.' read -ra V <<< "$CURRENT_VERSION"
          MAJOR=${V[0]}; MINOR=${V[1]}; PATCH=${V[2]:-0}

          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          echo "Branch context: $BRANCH"
          echo "Event: ${GITHUB_EVENT_NAME}"

          # Bump logic: feat/* -> minor, fix/* -> patch, otherwise patch
          if [[ "$BRANCH" == feat/* ]]; then
            MINOR=$((MINOR + 1)); PATCH=0
          elif [[ "$BRANCH" == fix/* ]]; then
            PATCH=$((PATCH + 1))
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > version
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version: $NEW_VERSION"

      - name: Update changelog (normalize old headers to new version)
        run: |
          NEW_VERSION=$(cat version)
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1 || echo "")
          DATE_FULL=$(date +'%Y-%m-%d %H:%M:%S')
          DATE_SHORT=$(date +'%Y-%m-%d')

          echo "Updating changelog for version $NEW_VERSION (branch: $BRANCH)"

          TEMP_FILE="changelog_${NEW_VERSION}_$(date +%s).tmp"

          # New entry header
          {
            echo "## [v${NEW_VERSION}] - ${DATE_SHORT}"
            echo "- Branch: ${BRANCH}"
            if [ -n "${COMMIT_MSG}" ]; then
              echo "- Commit: ${COMMIT_MSG}"
            fi
            echo "- Build: #${GITHUB_RUN_NUMBER}"
            echo "- Date: ${DATE_FULL}"
            echo ""
          } > "$TEMP_FILE"

          if [ -f changelog.md ]; then
            echo "Normalizing old version headers to v${NEW_VERSION} and appending existing content..."
            # Replace any header like "## [vX.Y.Z]" with the current version header text (keeps other content)
            # We append the normalized content to keep previous changelog items (but with updated header tags)
            sed -E "s/## \\[v[0-9]+\\.[0-9]+\\.[0-9]+\\]/## [v${NEW_VERSION}]/g" changelog.md >> "$TEMP_FILE"
          fi

          mv "$TEMP_FILE" changelog.md
          echo "changelog.md updated."

          # Prepare changelog.txt for notifications
          {
            echo "Version: ${NEW_VERSION}"
            echo "Branch: ${BRANCH}"
            if [ -n "${COMMIT_MSG}" ]; then
              echo "Commit: ${COMMIT_MSG}"
            fi
            echo "Date: ${DATE_FULL}"
            echo ""
            echo "Recent changelog (top 20 lines):"
            head -n 20 changelog.md || true
          } > changelog.txt
          echo "changelog.txt prepared."

      - name: Ensure Git sees all changes
        run: |
          git reset
          git add -A
          git status --porcelain || true

      - name: Commit & Push changelog safely
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Ensure all changes staged
          git add -A

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "CI: Update changelog for v$(cat version)" || true

            # Detect branch; fall back to GITHUB_REF_NAME if detached HEAD
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [ "$CURRENT_BRANCH" = "HEAD" ]; then
              CURRENT_BRANCH="${GITHUB_REF_NAME}"
            fi
            echo "Detected branch for push: $CURRENT_BRANCH"

            # Try to rebase on remote branch to avoid non-fast-forward errors, ignore failures
            git fetch origin "$CURRENT_BRANCH" || true
            git pull --rebase origin "$CURRENT_BRANCH" || true

            # Push using token
            git push "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:"$CURRENT_BRANCH" || {
              echo "::warning::Push failed; attempt force push"
              git push --force "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:"$CURRENT_BRANCH" || echo "::error::Force push failed"
            }
          fi

# ======================================
# 4Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
# ======================================
  notify:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup timezone
        run: sudo timedatectl set-timezone Europe/Moscow

      - name: Prepare changelog.txt preview
        run: |
          if [ ! -f version ]; then
            echo "1.0.0" > version
          fi

          echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" > changelog.txt
          echo "‚ïë        BUILD SUMMARY         ‚ïë" >> changelog.txt
          echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> changelog.txt
          echo "‚ïë Version: $(cat version)      ‚ïë" >> changelog.txt
          echo "‚ïë Build: #$GITHUB_RUN_NUMBER   ‚ïë" >> changelog.txt
          echo "‚ïë Date: $(date +'%Y-%m-%d %H:%M MSK') ‚ïë" >> changelog.txt
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" >> changelog.txt
          echo "" >> changelog.txt

          if [ -f changelog.md ]; then
            echo "Recent changes:" >> changelog.txt
            head -n 10 changelog.md >> changelog.txt
          fi

          echo "Prepared changelog.txt:"
          cat changelog.txt || true

      - name: Send Telegram notification (if secrets exist)
        run: |
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] || [ -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            echo "::warning::Telegram secrets missing, skipping notification"
            exit 0
          fi

          TEXT="üöÄ *–°–±–æ—Ä–∫–∞ #${{ github.run_number }} —É—Å–ø–µ—à–Ω–∞!*%0A%0A"
          TEXT+="üè∑ *–í–µ—Ä—Å–∏—è:* \`$(cat version)\`%0A"
          TEXT+="üìÖ *–î–∞—Ç–∞:* $(date +'%Y-%m-%d %H:%M MSK')%0A"
          TEXT+="üîó *–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* ${{ github.repository }}%0A%0A"
          TEXT+="_–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ_ ‚Üì"

          # Send message
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="MarkdownV2" \
            -d text="$TEXT" || echo "::warning::Telegram message failed"

          # Send file
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F document=@changelog.txt || echo "::warning::Telegram file send failed"

# ======================================
# 5Ô∏è‚É£ DockerHub –ø—É–±–ª–∏–∫–∞—Ü–∏—è
# ======================================
  dockerhub_publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        run: |
          if [ -z "${{ secrets.DOCKER_HUB_TOKEN }}" ] || [ -z "${{ secrets.DOCKER_HUB_LOGIN }}" ]; then
            echo "::warning::DockerHub secrets missing; skipping docker publish"
            exit 0
          fi
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_LOGIN }}" --password-stdin

      - name: Read version
        id: ver
        run: |
          v=$(tr -d '\r\n ' < version 2>/dev/null || echo "1.0.0")
          echo "VERSION=$v" >> $GITHUB_OUTPUT

      - name: Build image
        run: docker build -t ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} . || echo "::warning::docker build failed"

      - name: Push image
        run: docker push ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} || echo "::warning::docker push failed"

      - name: Add dockerhub label (on PR)
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: docker-published
