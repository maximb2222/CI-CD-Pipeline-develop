name: CI/CD for C# Script

on: [push, pull_request]

jobs:

  # === 1. TEST STAGE ===
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run tests
        run: |
          cd tests
          dotnet test --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/*.trx

  # === 2. SECURITY STAGE ===
  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Debug project structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Project files:"; find . -name "*.csproj"
          echo "Solution files:"; find . -name "*.sln"

      - name: Build project
        run: dotnet build src --configuration Release

      - name: Check vulnerable packages
        run: |
          PROJECT_FILE=$(find src -name "*.csproj" | head -1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "Error: No .csproj file found in src directory!"
            exit 1
          fi
          dotnet list "$PROJECT_FILE" package --vulnerable || true

      - name: VirusTotal scan
        run: |
          echo "Starting VirusTotal scan..."
          DLL_FILE=$(find src/bin/Release/net8.0 -name "*.dll" | head -1)
          if [ -z "$DLL_FILE" ]; then
            echo "No .dll found"
            exit 0
          fi
          SCAN_RESULT=$(curl -s -X POST \
            -H "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
            -F "file=@$DLL_FILE" \
            https://www.virustotal.com/api/v3/files)
          echo "$SCAN_RESULT" | jq . || true

  # === 3. BUILD STAGE ===
  build:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build project
        run: dotnet build src --configuration Release

      - name: Bump version
        run: |
          CURRENT_VERSION=$(cat version 2>/dev/null || echo "1.0.0")
          IFS='.' read -ra PARTS <<< "$CURRENT_VERSION"
          MAJOR=${PARTS[0]}
          MINOR=${PARTS[1]}
          PATCH=${PARTS[2]}
          
          if [[ "$GITHUB_HEAD_REF" == feat/* ]]; then
            MINOR=$((MINOR + 1)); PATCH=0
          elif [[ "$GITHUB_HEAD_REF" == fix/* ]]; then
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > version
          echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"

      - name: Update changelog
        run: |
          VERSION=$(cat version)
          TEMP="changelog_$(date +%s).tmp"
          {
            echo "## [v$VERSION] - $(date +'%Y-%m-%d')"
            echo "- Build $GITHUB_RUN_NUMBER"
            echo "- Branch: ${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}"
            echo
            [ -f changelog.md ] && cat changelog.md
          } > "$TEMP"
          mv "$TEMP" changelog.md
          echo "Changelog updated"

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          git add changelog.md changelog.txt version || true
          git diff --cached --quiet && echo "No changes to commit" && exit 0
          git commit -m "CI: Update changelog for v$(cat version) [skip ci]" || true
          git pull --rebase origin $BRANCH || true
          git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" HEAD:$BRANCH || echo "‚ö†Ô∏è Push skipped"

  # === 4. NOTIFY STAGE ===
  notify:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup timezone
        run: sudo timedatectl set-timezone Europe/Moscow

      - name: Verify and increment version
        run: |
          [ ! -f version ] && echo "1.0.0" > version
          awk -F. '{OFS="."; $3++; print}' version > v.tmp && mv v.tmp version
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version
          git commit -m "CI: Auto-increment version to $(cat version)" || true
          git push origin HEAD:${{ github.ref_name }} || true

      - name: Prepare changelog
        run: |
          VERSION=$(cat version)
          {
            echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
            echo "‚ïë          BUILD SUMMARY             ‚ïë"
            echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
            echo "‚ïë Version: $VERSION"
            echo "‚ïë Build: #$GITHUB_RUN_NUMBER"
            echo "‚ïë Date: $(date +'%Y-%m-%d %H:%M MSK')"
            echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
            echo ""
            echo "Recent changes:"
            grep -v '^##' changelog.md | head -n 5 | sed 's/^-/‚Ä¢/'
          } > changelog.txt
          cat changelog.txt

      - name: Send Telegram notification
        run: |
          TEXT="üöÄ *–°–±–æ—Ä–∫–∞ #${{ github.run_number }} —É—Å–ø–µ—à–Ω–∞!*%0A"
          TEXT+="üè∑ –í–µ—Ä—Å–∏—è: \`${{ github.ref_name }}\`%0A"
          TEXT+="üìÖ –î–∞—Ç–∞: $(date +'%Y-%m-%d %H:%M MSK')%0A"
          TEXT+="üîó [–û—Ç–∫—Ä—ã—Ç—å GitHub Actions]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)%0A%0A"
          TEXT+="_–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ_ ‚Üì"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$TEXT" || echo "‚ö†Ô∏è Telegram message failed"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F document=@"changelog.txt" || echo "‚ö†Ô∏è Telegram file failed"

  # === 5. DOCKERHUB PUBLISH ===
  dockerhub_publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4
      - name: Docker login
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_LOGIN }}" --password-stdin
      - name: Read version
        id: ver
        run: |
          v=$(tr -d '\r\n ' < version); v=${v#v}
          echo "VERSION=$v" >> $GITHUB_OUTPUT
      - name: Build image
        run: docker build -t ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} .
      - name: Push image
        run: docker push ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }}
      - name: Add dockerhub label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: docker-published
