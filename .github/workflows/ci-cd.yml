name: CI/CD for C# Script

on:
  push:
    branches:
      - main
      - dev
      - staging
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:

 
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run tests
        run: |
          cd tests
          dotnet test --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/*.trx


  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build project
        run: dotnet build src --configuration Release

      - name: Check vulnerable packages
        run: |
          PROJECT_FILE=$(find src -name "*.csproj" | head -1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "Error: No .csproj found!"
            exit 1
          fi
          dotnet list "$PROJECT_FILE" package --vulnerable || true

      - name: VirusTotal scan
        run: |
          DLL_FILE=$(find src/bin/Release/net8.0 -name "*.dll" | head -1)
          if [ -n "$DLL_FILE" ]; then
            echo "Scanning $DLL_FILE..."
            curl -s -X POST \
              -H "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
              -F "file=@$DLL_FILE" \
              https://www.virustotal.com/api/v3/files || true
          else
            echo "No DLL found to scan."
          fi

  # === ЭТАП 3: Сборка и обновление changelog ===
  build:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: dotnet build src --configuration Release

      - name: Bump version
        id: bump
        run: |
          if [ ! -f version ]; then echo "1.0.0" > version; fi

          CURRENT=$(cat version)
          MAJOR=$(echo $CURRENT | cut -d. -f1)
          MINOR=$(echo $CURRENT | cut -d. -f2)
          PATCH=$(echo $CURRENT | cut -d. -f3)
          BRANCH=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}

          if [ "$BRANCH" = "main" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW="$MAJOR.$MINOR.$PATCH"
          echo "$NEW" > version
          echo "version=$NEW" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          VERSION=$(cat version)
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BRANCH=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}
          BUILD=$GITHUB_RUN_NUMBER
          TEMP="changelog_$(date +%s).tmp"

          echo "## [v$VERSION] - $DATE" > $TEMP
          echo "- Build $BUILD" >> $TEMP
          echo "- Branch: $BRANCH" >> $TEMP
          echo "" >> $TEMP
          [ -f changelog.md ] && cat changelog.md >> $TEMP
          mv $TEMP changelog.md

          echo "✅ changelog.md updated successfully."

      - name: Commit & Push changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          git add changelog.md version
          git diff --cached --quiet && echo "No changes to commit." && exit 0
          git commit -m "CI: Update changelog for v$(cat version) [skip ci]" || true
          git pull --rebase origin $CURRENT_BRANCH || true
          git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" HEAD:$CURRENT_BRANCH || echo "⚠️ Push failed but continuing..."

      - name: Create git tag (only main)
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=$(cat version)
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION" || echo "⚠️ Failed to push tag"

  # === ЭТАП 4: Уведомление в Telegram ===
  notify:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Send Telegram message
        run: |
          VERSION=$(cat version)
          BUILD=$GITHUB_RUN_NUMBER
          BRANCH=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}
          TEXT="✅ *Build successful!*%0A
          *Version:* v$VERSION%0A
          *Build:* #$BUILD%0A
          *Branch:* $BRANCH%0A
          [View Workflow Run]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$TEXT" || true

  # === ЭТАП 5: Публикация Docker образа ===
  dockerhub_publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_LOGIN }}" --password-stdin

      - name: Read version
        id: ver
        shell: bash
        run: |
          v=$(tr -d '\r\n ' < version); v=${v#v}
          echo "VERSION=$v" >> $GITHUB_OUTPUT

      - name: Build image
        run: docker build -t ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} .

      - name: Push image
        run: docker push ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }}
