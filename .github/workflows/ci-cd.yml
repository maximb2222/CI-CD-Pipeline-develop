name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ closed ]  # Триггер только на закрытие PR

env:
  DOCKER_IMAGE_NAME: ${{ github.repository }}
  REGISTRY: docker.io

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0    
      - name: Validate Commit Messages
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
      - name: Run security audit
        run: npm audit --audit-level high

  label-test-passed:
    needs: [test]
    if: ${{ github.event_name == 'pull_request' && needs.test.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: test-passed

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  label-sec-passed:
    needs: [security-scan]
    if: ${{ github.event_name == 'pull_request' && needs.security-scan.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: sec-passed

  build-and-deploy:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    outputs:
      new_release_published: ${{ steps.semantic_version.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic_version.outputs.new_release_version }}
      new_release_git_tag: ${{ steps.semantic_version.outputs.new_release_git_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Semantic Release
        id: semantic_version
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug semantic version output
        run: |
          echo "NEW_RELEASE_PUBLISHED=${{ steps.semantic_version.outputs.new_release_published }}"
          echo "NEW_RELEASE_VERSION=${{ steps.semantic_version.outputs.new_release_version }}"
          echo "NEW_RELEASE_GIT_TAG=${{ steps.semantic_version.outputs.new_release_git_tag }}"
      - name: Add changelog label
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repo: ${{ github.repository }}
          number: ${{ github.event.pull_request.number }}
          labels: changelog
      - name: Add version label
        if: >
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repo: ${{ github.repository }}
          number: ${{ github.event.pull_request.number }}
          labels: ${{ steps.semantic_version.outputs.new_release_version }}
      - name: Set up Docker Buildx
        if: steps.semantic_version.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: steps.semantic_version.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        if: steps.semantic_version.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ steps.semantic_version.outputs.new_release_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Add dockerhub label
        if: >
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repo: ${{ github.repository }}
          number: ${{ github.event.pull_request.number }}
          labels: dockerhub
      - name: Prepare changelog
        if: steps.semantic_version.outputs.new_release_published == 'true'
        run: cp CHANGELOG.md changelog.md

      - name: Get date
        id: date
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Send Telegram info message
        if: steps.semantic_version.outputs.new_release_published == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            Новый выпуск изменений
      
            Проект: ${{ github.repository }}
            Версия: ${{ steps.semantic_version.outputs.new_release_version }}
            Дата: ${{ steps.date.outputs.date }}
            Автор: ${{ github.actor }}
      
            Информация о Git-репозитории
            GIT TAG: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic_version.outputs.new_release_git_tag }}
      
            Информация о Docker-репозитории
            Владелец: ${{ secrets.DOCKER_USERNAME }}
            Название: ${{ github.event.repository.name }}
            Тег: ${{ steps.semantic_version.outputs.new_release_version }}
            Полное имя: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ steps.semantic_version.outputs.new_release_version }}

      - name: Send changelog file
        if: steps.semantic_version.outputs.new_release_published == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          document: changelog.md
          caption: 'CHANGELOG.md'


  deploy:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: needs.build-and-deploy.outputs.new_release_published == 'true'
    steps:
      - name: Deploy to staging (Mock)
        run: |
          echo "Deploy step"
