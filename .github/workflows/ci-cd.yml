name: CI/CD for C# Script

on: [push, pull_request]

jobs:

  # === –≠—Ç–∞–ø 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: Run tests
        run: |
          cd tests
          dotnet test --logger "trx;LogFileName=test-results.trx"
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/*.trx


  # === –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (VirusTotal) ===
  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: Debug project structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Project files:"
          find . -name "*.csproj"
          echo "Solution files:"
          find . -name "*.sln"
      
      - name: Build project
        run: dotnet build src --configuration Release
      
      - name: Check vulnerable packages
        run: |
          PROJECT_FILE=$(find src -name "*.csproj" | head -1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "Error: No .csproj file found in src directory!"
            exit 1
          fi
          echo "Checking vulnerabilities in $PROJECT_FILE"
          dotnet list "$PROJECT_FILE" package --vulnerable
      
      - name: List build artifacts
        run: ls -la src/bin/Release/net8.0/
      
      - name: VirusTotal scan
        run: |
          echo "Starting VirusTotal scan..."
          DLL_FILE=$(find src/bin/Release/net8.0 -name "*.dll" | head -1)
          if [ -z "$DLL_FILE" ]; then
            echo "Error: No .dll files found in src/bin/Release/net8.0/"
            exit 1
          fi
          
          echo "Scanning $DLL_FILE with VirusTotal..."
          SCAN_RESULT=$(curl -s -X POST \
            -H "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
            -F "file=@$DLL_FILE" \
            https://www.virustotal.com/api/v3/files)
          
          echo "Scan results:"
          echo "$SCAN_RESULT" | jq .
          echo "VirusTotal scan completed for $DLL_FILE"


  # === –≠—Ç–∞–ø 3: –°–±–æ—Ä–∫–∞, –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ changelog ===
  build:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: Build
        run: dotnet build src --configuration Release

      - name: Bump version
        run: |
          if [ ! -f version ]; then
            echo "1.0.0" > version
          fi

          CURRENT_VERSION=$(cat version)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          if [[ "$GITHUB_HEAD_REF" == feat/* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$GITHUB_HEAD_REF" == fix/* ]]; then
            PATCH=$((PATCH + 1))
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > version
          echo "Version bumped: $CURRENT_VERSION ‚Üí $NEW_VERSION"

      - name: Update changelog (preserve old versions)
        run: |
          NEW_VERSION=$(cat version)
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1 || echo "")
          DATE_FULL=$(date +'%Y-%m-%d %H:%M:%S')
          DATE_SHORT=$(date +'%Y-%m-%d')

          echo "Updating changelog for version $NEW_VERSION (branch: $BRANCH)"

          TEMP_FILE="changelog_${NEW_VERSION}_$(date +%s).tmp"

          {
            echo "## [v${NEW_VERSION}] - ${DATE_SHORT}"
            echo "- Branch: ${BRANCH}"
            if [ -n "${COMMIT_MSG}" ]; then
              echo "- Commit: ${COMMIT_MSG}"
            fi
            echo "- Build: #${GITHUB_RUN_NUMBER}"
            echo "- Date: ${DATE_FULL}"
            echo ""
          } > "$TEMP_FILE"

          if [ -f changelog.md ]; then
            cat changelog.md >> "$TEMP_FILE"
          fi

          mv "$TEMP_FILE" changelog.md

          {
            echo "Version: ${NEW_VERSION}"
            echo "Branch: ${BRANCH}"
            if [ -n "${COMMIT_MSG}" ]; then
              echo "Commit: ${COMMIT_MSG}"
            fi
            echo "Date: ${DATE_FULL}"
            echo ""
            echo "Recent changelog:"
            head -n 20 changelog.md || true
          } > changelog.txt
          echo "‚úÖ changelog updated successfully"

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add changelog.md changelog.txt version

          if ! git diff-index --quiet HEAD --; then
            git commit -m "CI: Update changelog for v$(cat version) [skip ci]"
            git pull origin $(git rev-parse --abbrev-ref HEAD) --rebase
            git push "https://$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git" HEAD:$(git rev-parse --abbrev-ref HEAD)
          else
            echo "No changes to commit."
          fi


  # === –≠—Ç–∞–ø 4: Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ===
  notify:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup timezone
        run: sudo timedatectl set-timezone Europe/Moscow
      
      - name: Get version info
        id: version
        run: |
          echo "version=$(cat version)" >> $GITHUB_OUTPUT
          echo "build_number=$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT
          echo "run_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Send Telegram notification
        run: |
          TEXT="üöÄ *–°–±–æ—Ä–∫–∞ #${{ steps.version.outputs.build_number }} —É—Å–ø–µ—à–Ω–∞\!*\n\n"
          TEXT+="üè∑ *–í–µ—Ä—Å–∏—è:* \`${{ steps.version.outputs.version }}\`\n"
          TEXT+="üìÖ *–î–∞—Ç–∞:* $(date +'%Y-%m-%d %H:%M MSK')\n"
          TEXT+="üîó *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:* [${{ github.repository }}](${{ steps.version.outputs.run_url }})\n\n"
          TEXT+="_–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ_ ‚Üì"

          curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$TEXT"

          curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F document=@"${{ github.workspace }}/changelog.txt"


  # === –≠—Ç–∞–ø 5: –ü—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞ ===
  dockerhub_publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_LOGIN }}" --password-stdin

      - name: Read version
        id: ver
        run: |
          v=$(tr -d '\r\n ' < version); v=${v#v}
          echo "VERSION=$v" >> $GITHUB_OUTPUT

      - name: Build image
        run: docker build -t ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} .

      - name: Push image
        run: docker push ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }}

      - name: Add dockerhub label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: docker-published
