name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      # üßÆ Version bump logic
      - name: Auto-increment version
        id: versioning
        run: |
          echo "üîç Calculating next version..."
          if [ ! -f version ]; then
            echo "v1.0.0" > version
          fi

          OLD_VERSION=$(cat version | sed 's/v//')
          IFS='.' read -r major minor patch <<< "$OLD_VERSION"

          patch=$((patch + 1))
          NEW_VERSION="v${major}.${minor}.${patch}"

          echo "$NEW_VERSION" > version
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

          echo "üî¢ Old: v$OLD_VERSION ‚Üí New: $NEW_VERSION"

      # üìù Update changelog (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏!)
      - name: Update changelog (preserve old versions)
        run: |
          NEW_VERSION=$(cat version)
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1 || echo "")
          DATE_FULL=$(date +'%Y-%m-%d %H:%M:%S')
          DATE_SHORT=$(date +'%Y-%m-%d')

          echo "Updating changelog for version $NEW_VERSION (branch: $BRANCH)"

          TEMP_FILE="changelog_${NEW_VERSION}_$(date +%s).tmp"

          {
            echo "## [${NEW_VERSION}] - ${DATE_SHORT}"
            echo "- Branch: ${BRANCH}"
            if [ -n "${COMMIT_MSG}" ]; then
              echo "- Commit: ${COMMIT_MSG}"
            fi
            echo "- Build: #${GITHUB_RUN_NUMBER}"
            echo "- Date: ${DATE_FULL}"
            echo ""
          } > "$TEMP_FILE"

          if [ -f changelog.md ]; then
            cat changelog.md >> "$TEMP_FILE"
          fi

          mv "$TEMP_FILE" changelog.md
          echo "‚úÖ changelog.md updated (old versions preserved)."

          # Create changelog.txt for Telegram/Docker
          {
            echo "Version: ${NEW_VERSION}"
            echo "Branch: ${BRANCH}"
            if [ -n "${COMMIT_MSG}" ]; then
              echo "Commit: ${COMMIT_MSG}"
            fi
            echo "Date: ${DATE_FULL}"
            echo ""
            echo "Recent changelog:"
            head -n 20 changelog.md || true
          } > changelog.txt

          echo "üìÑ changelog.txt generated successfully."

      # üß† Commit and push changes (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ exit code 128)
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîß Configuring git..."
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "üì¶ Current branch: $CURRENT_BRANCH"

          git add changelog.md changelog.txt version

          if ! git diff-index --quiet HEAD --; then
            git commit -m "CI: Update changelog for $(cat version) [skip ci]"
            echo "üöÄ Pushing changes..."
            git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:$CURRENT_BRANCH --force-with-lease
          else
            echo "‚úÖ No changes to commit."
          fi

      # üê≥ Docker build & push (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"
          IMAGE_NAME="${DOCKERHUB_USERNAME}/my-app"
          VERSION=$(cat version)
          docker build -t "${IMAGE_NAME}:${VERSION}" -t "${IMAGE_NAME}:latest" .
          docker push "${IMAGE_NAME}:${VERSION}"
          docker push "${IMAGE_NAME}:latest"
          echo "üê≥ Docker image ${IMAGE_NAME}:${VERSION} pushed successfully."

      # üì¢ Telegram notification (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      - name: Send Telegram notification
        if: success()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          VERSION=$(cat version)
          MESSAGE="‚úÖ *New Build:* ${VERSION}%0A*Branch:* ${GITHUB_REF_NAME}%0A*Commit:* $(git log -1 --pretty=%s)%0A*Date:* $(date +'%Y-%m-%d %H:%M:%S')"
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
               -d "chat_id=${TELEGRAM_CHAT_ID}" \
               -d "text=${MESSAGE}" \
               -d "parse_mode=Markdown"
