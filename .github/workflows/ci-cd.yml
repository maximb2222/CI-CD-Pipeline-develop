name: CI/CD for C# Script

on: [push, pull_request]

jobs:

# =======================
# –≠—Ç–∞–ø 1 ‚Äî —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# =======================
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run tests
        run: |
          cd tests
          dotnet test --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/*.trx


# =========================================
# –≠—Ç–∞–ø 2 ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (VirusTotal)
# =========================================
  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Debug project structure
        run: |
          echo "Current directory: $(pwd)"
          find . -name "*.csproj" -o -name "*.sln"

      - name: Build project
        run: dotnet build src --configuration Release

      - name: Check vulnerable packages
        run: |
          PROJECT_FILE=$(find src -name "*.csproj" | head -1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "Error: No .csproj file found!"
            exit 1
          fi
          echo "Checking vulnerabilities in $PROJECT_FILE"
          dotnet list "$PROJECT_FILE" package --vulnerable

      - name: VirusTotal scan
        run: |
          echo "Starting VirusTotal scan..."
          DLL_FILE=$(find src/bin/Release/net8.0 -name "*.dll" | head -1)
          if [ -z "$DLL_FILE" ]; then
            echo "Error: No .dll found!"
            exit 1
          fi
          SCAN_RESULT=$(curl -s -X POST \
            -H "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
            -F "file=@$DLL_FILE" \
            https://www.virustotal.com/api/v3/files)
          echo "$SCAN_RESULT" | jq .


# =========================================
# –≠—Ç–∞–ø 3 ‚Äî —Å–±–æ—Ä–∫–∞ + changelog (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
# =========================================
  build:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: dotnet build src --configuration Release || echo "::warning::Build failed"

      - name: Detect and bump version
        id: version
        run: |
          if [ ! -f version ]; then echo "1.0.0" > version; fi
          CURRENT_VERSION=$(cat version)
          IFS='.' read -ra V <<< "$CURRENT_VERSION"
          MAJOR=${V[0]}; MINOR=${V[1]}; PATCH=${V[2]}

          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          echo "Current branch: $BRANCH"

          if [[ "$BRANCH" == feat/* ]]; then
            MINOR=$((MINOR + 1)); PATCH=0
          elif [[ "$BRANCH" == fix/* ]]; then
            PATCH=$((PATCH + 1))
          elif [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > version
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version: $NEW_VERSION"

      - name: Update changelog (always on version change)
        run: |
          NEW_VERSION=$(cat version)
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1)
          echo "Updating changelog for version $NEW_VERSION"

          TEMP_FILE="changelog_$(date +%s).tmp"
          {
            echo "## [v${NEW_VERSION}] - $(date +'%Y-%m-%d')"
            if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
              echo "- Merged from ${BRANCH}"
            else
              echo "- Commit: ${COMMIT_MSG}"
            fi
            echo "- Build: #${GITHUB_RUN_NUMBER}"
            echo ""
          } > "$TEMP_FILE"

          [ -f changelog.md ] && cat changelog.md >> "$TEMP_FILE"
          mv "$TEMP_FILE" changelog.md

          {
            echo "Version: ${NEW_VERSION}"
            echo "Branch: ${BRANCH}"
            echo "Commit: ${COMMIT_MSG}"
            echo "Date: $(date +'%Y-%m-%d %H:%M:%S')"
            echo ""
            echo "Changes:"
            tail -n +3 changelog.md
          } > changelog.txt

      - name: Commit & Push changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version changelog.md changelog.txt
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "CI: Update changelog for v$(cat version)" || true
            git push "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:${GITHUB_REF_NAME} || echo "::warning::Push failed"
          fi


# =========================================
# –≠—Ç–∞–ø 4 ‚Äî Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
# =========================================
  notify:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true  

      - name: Setup timezone
        run: |
          sudo timedatectl set-timezone Europe/Moscow
          echo "Current time: $(date)"

      - name: Verify version
        run: |
          if [ ! -f version ]; then echo "1.0.0" > version; fi
          echo "Current version: $(cat version)"

      - name: Prepare changelog.txt
        run: |
          echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" > changelog.txt
          echo "‚ïë        BUILD SUMMARY         ‚ïë" >> changelog.txt
          echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> changelog.txt
          echo "‚ïë Version: $(cat version)      ‚ïë" >> changelog.txt
          echo "‚ïë Build: #$GITHUB_RUN_NUMBER   ‚ïë" >> changelog.txt
          echo "‚ïë Date: $(date +'%Y-%m-%d %H:%M MSK') ‚ïë" >> changelog.txt
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" >> changelog.txt
          echo "" >> changelog.txt
          if [ -f changelog.md ]; then
            echo "‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ" >> changelog.txt
            echo "‚ñà RECENT CHANGES:" >> changelog.txt
            echo "‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ" >> changelog.txt
            grep -v '^##' changelog.md | head -n 5 | sed 's/^-/‚Ä¢/' >> changelog.txt
          fi

      - name: Send Telegram notification
        run: |
          TEXT="üöÄ *–°–±–æ—Ä–∫–∞ #${{ github.run_number }} —É—Å–ø–µ—à–Ω–∞\!*\n\n"
          TEXT+="üè∑ *–í–µ—Ä—Å–∏—è:* \`${{ steps.version.outputs.new_version }}\`\n"
          TEXT+="üìÖ *–î–∞—Ç–∞:* $(date +'%Y-%m-%d %H:%M MSK')\n"
          TEXT+="üîó *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:* ${{ github.repository }}\n\n"
          TEXT+="_–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ_ ‚Üì"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$TEXT"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F document=@"changelog.txt"


# =========================================
# –≠—Ç–∞–ø 5 ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ DockerHub
# =========================================
  dockerhub_publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_LOGIN }}" --password-stdin

      - name: Read version
        id: ver
        shell: bash
        run: |
          v=$(tr -d '\r\n ' < version); v=${v#v}
          echo "VERSION=$v" >> $GITHUB_OUTPUT

      - name: Build image
        run: docker build -t ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} .

      - name: Push image
        run: docker push ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }}

      - name: Add dockerhub label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: docker-published
