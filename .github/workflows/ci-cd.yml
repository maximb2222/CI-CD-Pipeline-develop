name: CI/CD for C# Script

on: [push, pull_request]

jobs:

# ======================================
# 1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ======================================
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run tests
        run: |
          cd tests
          dotnet test --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/*.trx


# ======================================
# 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (VirusTotal)
# ======================================
  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build project
        run: dotnet build src --configuration Release

      - name: Check vulnerable packages
        run: |
          PROJECT_FILE=$(find src -name "*.csproj" | head -1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "Error: No .csproj file found!"
            exit 1
          fi
          echo "Checking vulnerabilities in $PROJECT_FILE"
          dotnet list "$PROJECT_FILE" package --vulnerable

      - name: VirusTotal scan
        run: |
          echo "Starting VirusTotal scan..."
          DLL_FILE=$(find src/bin/Release/net8.0 -name "*.dll" | head -1)
          if [ -z "$DLL_FILE" ]; then
            echo "Error: No .dll found!"
            exit 1
          fi
          SCAN_RESULT=$(curl -s -X POST \
            -H "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
            -F "file=@$DLL_FILE" \
            https://www.virustotal.com/api/v3/files)
          echo "$SCAN_RESULT" | jq .


# ======================================
# 3Ô∏è‚É£ –°–±–æ—Ä–∫–∞ + –≤–µ—Ä—Å–∏—è + changelog
# ======================================
  build:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build project
        run: dotnet build src --configuration Release

      - name: Detect and bump version
        id: version
        run: |
          if [ ! -f version ]; then echo "1.0.0" > version; fi
          CURRENT_VERSION=$(cat version)
          IFS='.' read -ra V <<< "$CURRENT_VERSION"
          MAJOR=${V[0]}; MINOR=${V[1]}; PATCH=${V[2]}

          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          echo "Current branch: $BRANCH"
          echo "Event: ${GITHUB_EVENT_NAME}"

          # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–µ—Ä—Å–∏–∏
          if [[ "$BRANCH" == feat/* ]]; then
            MINOR=$((MINOR + 1)); PATCH=0
          elif [[ "$BRANCH" == fix/* ]]; then
            PATCH=$((PATCH + 1))
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > version
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version bumped to $NEW_VERSION"

      - name: Update changelog (always runs)
        run: |
          NEW_VERSION=$(cat version)
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1)
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          echo "Updating changelog for version $NEW_VERSION ($BRANCH)"

          TEMP_FILE="changelog_$(date +%s).tmp"
          {
            echo "## [v${NEW_VERSION}] - $(date +'%Y-%m-%d')"
            echo "- Branch: ${BRANCH}"
            echo "- Commit: ${COMMIT_MSG}"
            echo "- Build: #${GITHUB_RUN_NUMBER}"
            echo "- Date: ${DATE}"
            echo ""
          } > "$TEMP_FILE"

          [ -f changelog.md ] && cat changelog.md >> "$TEMP_FILE"
          mv "$TEMP_FILE" changelog.md

          echo "Version: ${NEW_VERSION}" > changelog.txt
          echo "Branch: ${BRANCH}" >> changelog.txt
          echo "Commit: ${COMMIT_MSG}" >> changelog.txt
          echo "Date: ${DATE}" >> changelog.txt
          echo "" >> changelog.txt
          echo "Recent changes:" >> changelog.txt
          head -n 10 changelog.md >> changelog.txt

      - name: Ensure Git sees all changes
        run: |
          git reset
          git add -A
          git status

      - name: Commit & Push changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "CI: Update changelog for v$(cat version)" || true
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [ "$CURRENT_BRANCH" = "HEAD" ]; then
              CURRENT_BRANCH="${GITHUB_REF_NAME}"
            fi
            echo "Detected branch: $CURRENT_BRANCH"
            git pull --rebase origin "$CURRENT_BRANCH" || true
            git push "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:$CURRENT_BRANCH || echo "::warning::Push failed"
          fi


# ======================================
# 4Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
# ======================================
  notify:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup timezone
        run: sudo timedatectl set-timezone Europe/Moscow

      - name: Prepare changelog.txt
        run: |
          echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" > changelog.txt
          echo "‚ïë        BUILD SUMMARY         ‚ïë" >> changelog.txt
          echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" >> changelog.txt
          echo "‚ïë Version: $(cat version)      ‚ïë" >> changelog.txt
          echo "‚ïë Build: #$GITHUB_RUN_NUMBER   ‚ïë" >> changelog.txt
          echo "‚ïë Date: $(date +'%Y-%m-%d %H:%M MSK') ‚ïë" >> changelog.txt
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" >> changelog.txt
          echo "" >> changelog.txt
          if [ -f changelog.md ]; then
            echo "Recent changes:" >> changelog.txt
            head -n 10 changelog.md >> changelog.txt
          fi

      - name: Send Telegram notification
        run: |
          TEXT="üöÄ *–°–±–æ—Ä–∫–∞ #${{ github.run_number }} —É—Å–ø–µ—à–Ω–∞\!*\n\n"
          TEXT+="üè∑ *–í–µ—Ä—Å–∏—è:* \`${{ steps.version.outputs.new_version }}\`\n"
          TEXT+="üìÖ *–î–∞—Ç–∞:* $(date +'%Y-%m-%d %H:%M MSK')\n"
          TEXT+="üîó *–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* ${{ github.repository }}\n\n"
          TEXT+="_–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ_ ‚Üì"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$TEXT"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F document=@"changelog.txt"


# ======================================
# 5Ô∏è‚É£ DockerHub –ø—É–±–ª–∏–∫–∞—Ü–∏—è
# ======================================
  dockerhub_publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_LOGIN }}" --password-stdin

      - name: Read version
        id: ver
        run: |
          v=$(tr -d '\r\n ' < version)
          echo "VERSION=$v" >> $GITHUB_OUTPUT

      - name: Build image
        run: docker build -t ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} .

      - name: Push image
        run: docker push ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }}

      - name: Add dockerhub label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: docker-published
