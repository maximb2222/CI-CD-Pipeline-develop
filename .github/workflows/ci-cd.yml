name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
      - staging
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: VirusTotal scan
        run: |
          echo "Scanning files..."
          jq --version || true

      - name: Bump version (smart)
        id: version
        run: |
          echo "üîπ Starting version bump..."
          if [ ! -f version ]; then
            echo "1.0.0" > version
          fi

          CURRENT=$(cat version)
          BRANCH=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}
          BUILD=$GITHUB_RUN_NUMBER

          echo "Current version: $CURRENT"
          echo "Branch: $BRANCH"
          echo "Build: $BUILD"

          MAJOR=$(echo $CURRENT | cut -d. -f1)
          MINOR=$(echo $CURRENT | cut -d. -f2)
          PATCH=$(echo $CURRENT | cut -d. -f3)

          if [ "$BRANCH" = "main" ]; then
            # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–æ—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é
            MINOR=$((MINOR + 1))
            PATCH=0
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "üîº New minor version: $NEW_VERSION"
          else
            # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∏–ª–¥ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "üì¶ New patch version: $NEW_VERSION"
          fi

          echo "$NEW_VERSION" > version
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          VERSION=$(cat version)
          DATE=$(date +'%Y-%m-%d')
          BUILD=$GITHUB_RUN_NUMBER
          BRANCH=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}
          TEMP="changelog_$(date +%s).tmp"

          echo "üîç Updating changelog for version $VERSION (build $BUILD)..."

          if [ -f changelog.md ] && grep -q "## \[v$VERSION\]" changelog.md; then
            echo "Version $VERSION already exists ‚Äî appending new build info."
            awk -v ver="## [v$VERSION]" -v build="$BUILD" -v branch="$BRANCH" -v date="$DATE" '
              $0 == ver { print; print "- Build " build; print "- Branch: " branch; print "- Date: " date; next }
              1
            ' changelog.md > "$TEMP"
          else
            echo "New version detected ‚Äî creating new changelog entry."
            {
              echo "## [v$VERSION] - $DATE"
              echo "- Build $BUILD"
              echo "- Branch: $BRANCH"
              echo
              [ -f changelog.md ] && cat changelog.md
            } > "$TEMP"
          fi

          mv "$TEMP" changelog.md
          echo "‚úÖ changelog.md updated for version $VERSION"

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Working on branch: $CURRENT_BRANCH"

          git add changelog.md version || true
          git diff --cached --quiet && echo "No changes to commit" && exit 0

          git commit -m "CI: Update changelog and version v$(cat version) [skip ci]" || true
          git pull --rebase origin $CURRENT_BRANCH || true
          git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" HEAD:$CURRENT_BRANCH || echo "‚ö†Ô∏è Push failed, continuing..."

  notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Send Telegram notification
        run: |
          VERSION=$(cat version)
          BUILD=$GITHUB_RUN_NUMBER
          BRANCH=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}
          TEXT="‚úÖ *Build Successful*%0A
          ‚Ä¢ Version: v$VERSION%0A
          ‚Ä¢ Build: #$BUILD%0A
          ‚Ä¢ Branch: $BRANCH%0A
          ‚Ä¢ Repo: $GITHUB_REPOSITORY%0A
          [View Workflow Run]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"

          echo "Sending Telegram notification..."
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$TEXT" || true
