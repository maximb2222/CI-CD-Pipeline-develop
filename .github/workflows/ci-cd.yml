name: CI/CD for C# Script

on: [push, pull_request]

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Run tests
        run: |
          cd tests || exit 0
          dotnet test --logger "trx;LogFileName=test-results.trx" || echo "::warning::Tests failed or missing"
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/*.trx
        continue-on-error: true

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build project
        run: dotnet build src --configuration Release || echo "::warning::Build failed"

      - name: Check vulnerable packages
        run: |
          PROJECT_FILE=$(find src -name "*.csproj" | head -1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "::warning::No .csproj found, skipping vulnerability check"
          else
            dotnet list "$PROJECT_FILE" package --vulnerable || echo "::warning::Vulnerability check failed"
          fi

      - name: VirusTotal scan
        run: |
          DLL_FILE=$(find src/bin/Release/net8.0 -name "*.dll" | head -1)
          if [ -z "$DLL_FILE" ]; then
            echo "::warning::No DLL found to scan"
          elif [ -z "${{ secrets.VIRUSTOTAL_API_KEY }}" ]; then
            echo "::warning::VIRUSTOTAL_API_KEY not set"
          else
            curl -s -X POST \
              -H "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
              -F "file=@$DLL_FILE" \
              https://www.virustotal.com/api/v3/files | jq . || echo "::warning::VirusTotal scan failed"
          fi

    build:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: dotnet build src --configuration Release || echo "::warning::Build failed"

      - name: Detect and bump version
        id: version
        run: |
          if [ ! -f version ]; then echo "1.0.0" > version; fi
          CURRENT_VERSION=$(cat version)
          IFS='.' read -ra V <<< "$CURRENT_VERSION"
          MAJOR=${V[0]}; MINOR=${V[1]}; PATCH=${V[2]}

          # Определяем контекст (PR, merge, push)
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          echo "Current branch: $BRANCH"

          if [[ "$BRANCH" == feat/* ]]; then
            MINOR=$((MINOR + 1)); PATCH=0
          elif [[ "$BRANCH" == fix/* ]]; then
            PATCH=$((PATCH + 1))
          elif [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            # Если push в main — патч-обновление
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > version
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version: $NEW_VERSION"

      - name: Update changelog (always on version change)
        run: |
          NEW_VERSION=$(cat version)
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1)

          echo "Updating changelog for version $NEW_VERSION"

          TEMP_FILE="changelog_$(date +%s).tmp"
          {
            echo "## [v${NEW_VERSION}] - $(date +'%Y-%m-%d')"
            if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
              echo "- Merged from ${BRANCH}"
            else
              echo "- Commit: ${COMMIT_MSG}"
            fi
            echo "- Build: #${GITHUB_RUN_NUMBER}"
            echo ""
          } > "$TEMP_FILE"

          [ -f changelog.md ] && cat changelog.md >> "$TEMP_FILE"
          mv "$TEMP_FILE" changelog.md

          {
            echo "Version: ${NEW_VERSION}"
            echo "Branch: ${BRANCH}"
            echo "Commit: ${COMMIT_MSG}"
            echo "Date: $(date +'%Y-%m-%d %H:%M:%S')"
            echo ""
            echo "Changes:"
            tail -n +3 changelog.md
          } > changelog.txt

      - name: Commit & Push changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add version changelog.md changelog.txt
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "CI: Update changelog for v$(cat version)" || true
            git push "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:${GITHUB_REF_NAME} || echo "::warning::Push failed"
          fi
