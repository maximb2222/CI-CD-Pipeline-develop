name: CI/CD for C# Script

on: [push, pull_request]

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Run tests
        run: |
          cd tests || exit 0
          dotnet test --logger "trx;LogFileName=test-results.trx" || echo "::warning::Tests failed or missing"
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/*.trx
        continue-on-error: true

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build project
        run: dotnet build src --configuration Release || echo "::warning::Build failed"

      - name: Check vulnerable packages
        run: |
          PROJECT_FILE=$(find src -name "*.csproj" | head -1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "::warning::No .csproj found, skipping vulnerability check"
          else
            dotnet list "$PROJECT_FILE" package --vulnerable || echo "::warning::Vulnerability check failed"
          fi

      - name: VirusTotal scan
        run: |
          DLL_FILE=$(find src/bin/Release/net8.0 -name "*.dll" | head -1)
          if [ -z "$DLL_FILE" ]; then
            echo "::warning::No DLL found to scan"
          elif [ -z "${{ secrets.VIRUSTOTAL_API_KEY }}" ]; then
            echo "::warning::VIRUSTOTAL_API_KEY not set"
          else
            curl -s -X POST \
              -H "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
              -F "file=@$DLL_FILE" \
              https://www.virustotal.com/api/v3/files | jq . || echo "::warning::VirusTotal scan failed"
          fi

  build:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: dotnet build src --configuration Release || echo "::warning::Build failed"

      - name: Bump version safely
        run: |
          if [ ! -f version ]; then echo "1.0.0" > version; fi
          CURRENT_VERSION=$(cat version)
          IFS='.' read -ra V <<< "$CURRENT_VERSION"
          MAJOR=${V[0]}; MINOR=${V[1]}; PATCH=${V[2]}
          if [[ "$GITHUB_HEAD_REF" == feat/* ]]; then
            MINOR=$((MINOR+1)); PATCH=0
          elif [[ "$GITHUB_HEAD_REF" == fix/* ]]; then
            PATCH=$((PATCH+1))
          fi
          echo "$MAJOR.$MINOR.$PATCH" > version
          echo "New version: $(cat version)"

      - name: Update changelog
        run: |
          TEMP="changelog_$(date +%s).tmp"
          echo "## [v$(cat version)] - $(date +'%Y-%m-%d')" > $TEMP
          echo "- Build $GITHUB_RUN_NUMBER" >> $TEMP
          echo "- Branch $GITHUB_HEAD_REF" >> $TEMP
          [ -f changelog.md ] && cat changelog.md >> $TEMP
          mv $TEMP changelog.md
          echo "Version: $(cat version)" > changelog.txt
          echo "Build: $GITHUB_RUN_NUMBER" >> changelog.txt
          echo "Date: $(date)" >> changelog.txt

      - name: Commit & Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version changelog.md changelog.txt
          git commit -m "CI: Update version $(cat version)" || echo "Nothing to commit"
          git push "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:${GITHUB_REF_NAME} || echo "::warning::Push failed"

  notify:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare changelog.txt
        run: |
          if [ ! -f changelog.txt ]; then
            echo "::warning::No changelog.txt found, creating default"
            echo "Build info missing" > changelog.txt
          fi
          echo "File content:"
          cat changelog.txt

      - name: Send Telegram notification
        run: |
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] || [ -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            echo "::warning::Telegram secrets not set, skipping notification"
            exit 0
          fi

          TEXT="🚀 *Сборка успешна*%0A"
          TEXT+="🏷 Версия: $(cat version)%0A"
          TEXT+="📅 Дата: $(date +'%Y-%m-%d %H:%M MSK')%0A"
          TEXT+="🔗 Репозиторий: ${{ github.repository }}"

          curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="MarkdownV2" \
            -d text="$TEXT" || echo "::warning::Telegram message failed"

          curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F document=@changelog.txt || echo "::warning::Telegram file send failed"

  dockerhub_publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        run: |
          if [ -z "${{ secrets.DOCKER_HUB_TOKEN }}" ]; then
            echo "::warning::No Docker token, skipping"
            exit 0
          fi
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_LOGIN }}" --password-stdin

      - name: Read version
        id: ver
        run: |
          v=$(cat version 2>/dev/null || echo "1.0.0")
          echo "VERSION=$v" >> $GITHUB_OUTPUT

      - name: Build image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} . || echo "::warning::Docker build failed"

      - name: Push image
        run: |
          docker push ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} || echo "::warning::Docker push failed"
