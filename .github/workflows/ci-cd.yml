name: CI/CD for C# Script

on: [push, pull_request]

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Run tests
        run: |
          cd tests
          dotnet test --logger "trx;LogFileName=test-results.trx"
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tests/TestResults/*.trx

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Build project
        run: dotnet build src --configuration Release
      - name: Check vulnerable packages
        run: |
          PROJECT_FILE=$(find src -name "*.csproj" | head -1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "Error: No .csproj file found!"
            exit 1
          fi
          dotnet list "$PROJECT_FILE" package --vulnerable
      - name: VirusTotal scan
        run: |
          DLL_FILE=$(find src/bin/Release/net8.0 -name "*.dll" | head -1)
          if [ -z "$DLL_FILE" ]; then
            echo "Error: No .dll files found!"
            exit 1
          fi
          curl -s -X POST \
            -H "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
            -F "file=@$DLL_FILE" \
            https://www.virustotal.com/api/v3/files | jq .

  build:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: dotnet build src --configuration Release

      - name: Bump version
        run: |
          CURRENT_VERSION=$(cat version)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          if [[ "$GITHUB_HEAD_REF" == feat/* ]]; then
            MINOR=$((MINOR + 1)); PATCH=0
          elif [[ "$GITHUB_HEAD_REF" == fix/* ]]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          [ "$NEW_VERSION" != "$CURRENT_VERSION" ] && echo "$NEW_VERSION" > version

      - name: Update changelog
        run: |
          TEMP_CHANGELOG="changelog_$(date +%s).tmp"
          echo "## [v$(cat version)] - $(date +'%Y-%m-%d')" > $TEMP_CHANGELOG
          echo "- Build $GITHUB_RUN_NUMBER" >> $TEMP_CHANGELOG
          echo "- Merged from $GITHUB_HEAD_REF" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          [ -f changelog.md ] && cat changelog.md >> $TEMP_CHANGELOG
          mv $TEMP_CHANGELOG changelog.md

          {
            echo "Version: $(cat version)"
            echo "Build: $GITHUB_RUN_NUMBER"
            echo "Date: $(date +'%Y-%m-%d %H:%M:%S')"
            echo ""
            echo "Changes:"
            tail -n +3 changelog.md
          } > changelog.txt

      - name: Commit and push changes safely
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          git add version changelog.md changelog.txt

          if ! git diff --quiet; then
            git commit -m "CI: Update changelog for v$(cat version) [skip ci]" || true

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π push (–±–µ–∑ pull, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑–≤–∞—Ç—å 128)
            git push "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:${CURRENT_BRANCH} || {
              echo "Push failed ‚Äî trying force push to avoid 128 error"
              git fetch origin ${CURRENT_BRANCH}
              git rebase origin/${CURRENT_BRANCH} || true
              git push "https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:${CURRENT_BRANCH} || true
            }
          else
            echo "No changes to commit"
          fi

  notify:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup timezone
        run: sudo timedatectl set-timezone Europe/Moscow

      - name: Verify version file
        run: |
          [ ! -f version ] && echo "1.0.0" > version
          echo "Current version: $(cat version)"

      - name: Send Telegram notification
        run: |
          TEXT="üöÄ *–°–±–æ—Ä–∫–∞ #${GITHUB_RUN_NUMBER} —É—Å–ø–µ—à–Ω–∞\!*%0A"
          TEXT+="üè∑ *–í–µ—Ä—Å–∏—è:* \`$(cat version)\`%0A"
          TEXT+="üìÖ *–î–∞—Ç–∞:* $(date +'%Y-%m-%d %H:%M MSK')%0A"
          TEXT+="üîó *–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:* ${GITHUB_REPOSITORY}%0A%0A"
          TEXT+="_–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ_ ‚Üì"

          curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="MarkdownV2" \
            -d text="$TEXT"

          curl -s -X POST \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F document=@changelog.txt

  dockerhub_publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_LOGIN }}" --password-stdin

      - name: Read version
        id: ver
        run: |
          v=$(tr -d '\r\n ' < version); v=${v#v}
          echo "VERSION=$v" >> $GITHUB_OUTPUT

      - name: Build image
        run: docker build -t ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }} .

      - name: Push image
        run: docker push ${{ secrets.DOCKER_HUB_LOGIN }}/ci-cd-pipeline:v${{ steps.ver.outputs.VERSION }}

      - name: Add dockerhub label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: docker-published
